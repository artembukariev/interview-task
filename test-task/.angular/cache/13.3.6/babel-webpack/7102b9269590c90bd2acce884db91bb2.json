{"ast":null,"code":"import { of, Subject } from \"rxjs\";\nimport { concatMap, delay } from \"rxjs/operators\";\nimport { webSocket } from \"rxjs/webSocket\";\nimport * as i0 from \"@angular/core\";\nexport let CandlestickChartService = /*#__PURE__*/(() => {\n  class CandlestickChartService {\n    constructor() {\n      this.subject = webSocket('wss://ws.coincap.io/prices?assets=bitcoin');\n      this.entryBalance = new Subject();\n    }\n\n    getChartData() {\n      this.rate = this.subject.pipe(concatMap(item => of(item).pipe(delay(1000)))).subscribe(data => {\n        this.rate = data;\n        this.subject.next(this.rate.bitcoin);\n      });\n      return this.subject;\n    }\n\n    shortTrade(entryValue, tradeStatus) {\n      if (!tradeStatus) {\n        this.tradeInfoExit = {\n          exit_date: new Date(),\n          exit_price: this.rate.bitcoin\n        };\n      } else {\n        this.tradeInfoStart = {\n          entry_price: this.rate.bitcoin,\n          currency_amount: +entryValue / +this.rate.bitcoin,\n          entryDate: new Date()\n        };\n      }\n\n      return of(tradeStatus ? this.tradeInfoStart : Object.assign(Object.assign({}, this.tradeInfoStart), this.tradeInfoExit));\n    }\n\n    longTrade(entryValue, tradeStatus) {\n      if (!tradeStatus || new Date() === entryValue.end) {\n        this.entryBalance.complete();\n      } else {\n        this.subject.subscribe(res => {\n          const balance = +entryValue.enter_balance / +res.bitcoin + res.bitcoin;\n          this.entryBalance.next(balance);\n        });\n      }\n\n      return this.entryBalance;\n    }\n\n  }\n\n  CandlestickChartService.ɵfac = function CandlestickChartService_Factory(t) {\n    return new (t || CandlestickChartService)();\n  };\n\n  CandlestickChartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CandlestickChartService,\n    factory: CandlestickChartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CandlestickChartService;\n})();","map":null,"metadata":{},"sourceType":"module"}